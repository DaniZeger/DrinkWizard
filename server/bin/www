// Import necessary modules
var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const mongoose = require('mongoose');
const config = require('../config/dev');
const init = require('../controllers/Init');
var server = http.createServer(app);

// Function to initialize data and start the server
const startServer = async () => {
  try {
    // Connect to the database
    await mongoose.connect(config.db_conn);
    console.log('Connected to the database successfully.');

    // Initialize the data
    await init.init();
    console.log('Data initialization completed successfully.');

    // Create HTTP server and listen
    var port = normalizePort(process.env.PORT || '8080');
    app.set('port', port);
    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.error('Error:', error);
  }
};

// Normalize a port into a number, string, or false
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event
function onListening() {
  var addr = server.address();
  if (addr) {
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log(`Listening on ${bind}`);
  } else {
    console.error('Server is not yet listening.');
  }
}


var server = http.createServer(app);
server.on('listening', () => {
  var addr = server.address();
  if (addr) {
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log(`Listening on ${bind}`);
  } else {
    console.error('Server address is null. The server might not be listening yet.');
  }
});



// Call the startServer function to initiate the server and data initialization
startServer();
